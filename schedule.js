const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");

puppeteer.use(StealthPlugin());

// H√†m l√†m s·∫°ch chu·ªói, ch·ªâ gi·ªØ c√°c k√Ω t·ª± h·ª£p l·ªá
function cleanText(text) {
  // T·∫≠p h·ª£p k√Ω t·ª± h·ª£p l·ªá: ch·ªØ Latin, s·ªë, kho·∫£ng tr·∫Øng, v√† c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c·∫ßn thi·∫øt
  const validPattern = /[A-Za-z√Ä-·ªπ0-9\s/:.\-]/; // T√°ch ri√™ng /, :, ., - ƒë·ªÉ tr√°nh l·ªói range
  return Array.from(text)
    .filter(char => validPattern.test(char))
    .join("")
    .trim();
}

async function launchBrowser() {
  try {
    const browser = await puppeteer.launch({
      executablePath: process.env.CHROME_PATH || "/usr/bin/google-chrome-stable",
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--single-process",
        "--no-zygote",
      ],
      timeout: 60000,
    });
    console.log("‚úÖ Tr√¨nh duy·ªát ƒë√£ kh·ªüi ƒë·ªông.");
    return browser;
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi ƒë·ªông tr√¨nh duy·ªát:", error);
    throw new Error("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông tr√¨nh duy·ªát.");
  }
}

async function login(page, username, password, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîë Th·ª≠ ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}...`);
      await page.goto("https://portal.ut.edu.vn/", {
        waitUntil: "networkidle2",
        timeout: 60000,
      });
      console.log("‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i.");

      await page.waitForSelector("input[name='username']", { timeout: 30000 });
      await page.type("input[name='username']", username, { delay: 50 });
      await page.waitForSelector("input[name='password']", { timeout: 30000 });
      await page.type("input[name='password']", password, { delay: 50 });
      console.log("‚úçÔ∏è ƒê√£ nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.");

      await page.click("button[type='submit']");
      await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 60000 });
      const finalUrl = page.url();
      console.log(`üåê URL sau ƒëƒÉng nh·∫≠p: ${finalUrl}`);

      if (finalUrl.includes("/dashboard")) {
        console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng.");
        return true;
      } else {
        throw new Error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, ki·ªÉm tra th√¥ng tin.");
      }
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}:`, error.message);
      if (attempt === retries) throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau ${retries} l·∫ßn.`);
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }
  }
}

async function getSchedule(nextWeek = false) {
  let browser;
  try {
    browser = await launchBrowser();
    const page = await browser.newPage();

    await login(page, process.env.UT_USERNAME, process.env.UT_PASSWORD);

    await page.goto("https://portal.ut.edu.vn/calendar", {
      waitUntil: "networkidle2",
      timeout: 60000,
    });
    await page.waitForSelector(".MuiTable-root", { timeout: 30000 });
    console.log("‚úÖ ƒê√£ t·∫£i trang l·ªãch h·ªçc.");

    // N·∫øu l·∫•y l·ªãch tu·∫ßn sau, nh·∫•n n√∫t ArrowForwardIcon
    if (nextWeek) {
      console.log("‚è© Chuy·ªÉn sang l·ªãch tu·∫ßn sau...");
      await page.waitForSelector("button.css-15yftlf", { timeout: 10000 });
      await page.click("button.css-15yftlf");
      await new Promise(resolve => setTimeout(resolve, 2000)); // Ch·ªù 2 gi√¢y ƒë·ªÉ trang t·∫£i l·∫°i
      await page.waitForSelector(".MuiTable-root", { timeout: 30000 });
      console.log("‚úÖ ƒê√£ chuy·ªÉn sang tu·∫ßn sau.");
    }

    const rawScheduleData = await page.evaluate(() => {
      const table = document.querySelector(".MuiTable-root");
      if (!table) return { error: "Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch h·ªçc." };

      const headers = Array.from(table.querySelectorAll("thead th")).map((th) =>
        th.textContent.trim().replace(/\n/g, " - ")
      );
      const days = headers.slice(1); // B·ªè c·ªôt "Ca h·ªçc"
      const schedule = {};

      days.forEach((day) => (schedule[day] = []));

      const rows = table.querySelectorAll("tbody tr");
      rows.forEach((row) => {
        const cells = row.querySelectorAll("td");
        const shift = cells[0]?.textContent.trim();
        if (!shift || shift.includes("S√°ng") || shift.includes("Chi·ªÅu") || shift.includes("T·ªëi")) return;

        for (let i = 1; i < cells.length; i++) {
          const day = days[i - 1];
          const cell = cells[i];
          const classBox = cell.querySelector(".MuiBox-root.css-415vdw");

          if (classBox) {
            const subject = classBox.querySelector(".css-eu5kgx")?.textContent.trim() || "Kh√¥ng r√µ";
            const details = Array.from(classBox.querySelectorAll(".css-189xydx")).map((p) => p.textContent.trim());
            const periods = details[1]?.replace("Ti·∫øt: ", "") || "Kh√¥ng r√µ";
            const time = details[2] || "Kh√¥ng r√µ";
            const startTime = time.split(" - ")[0] || "Kh√¥ng r√µ";
            const room = details[3]?.replace("Ph√≤ng: ", "") || "Kh√¥ng r√µ";

            schedule[day].push({
              shift,
              subject,
              periods,
              startTime,
              room,
            });
          }
        }
      });

      return { schedule, week: days[0].split(" - ")[1] || "hi·ªán t·∫°i" };
    });

    if (rawScheduleData.error) throw new Error(rawScheduleData.error);

    // L√†m s·∫°ch d·ªØ li·ªáu sau khi l·∫•y t·ª´ trang web
    const scheduleData = {
      schedule: {},
      week: cleanText(rawScheduleData.week),
    };
    for (const day in rawScheduleData.schedule) {
      scheduleData.schedule[day] = rawScheduleData.schedule[day].map((classInfo) => ({
        shift: cleanText(classInfo.shift),
        subject: cleanText(classInfo.subject),
        periods: cleanText(classInfo.periods),
        startTime: cleanText(classInfo.startTime),
        room: cleanText(classInfo.room),
      }));
    }

    console.log(`‚úÖ ƒê√£ l·∫•y v√† l√†m s·∫°ch l·ªãch h·ªçc ${nextWeek ? "tu·∫ßn sau" : "tu·∫ßn n√†y"}.`);
    return scheduleData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getSchedule:", error.message);
    throw error;
  } finally {
    if (browser) await browser.close();
  }
}

async function getTuition() {
  let browser;
  try {
    browser = await launchBrowser();
    const page = await browser.newPage();

    await login(page, process.env.UT_USERNAME, process.env.UT_PASSWORD);

    await page.goto("https://portal.ut.edu.vn/tuition", {
      waitUntil: "networkidle2",
      timeout: 60000,
    });
    await page.waitForSelector("table.MuiTable-root.MuiTable-stickyHeader", { timeout: 30000 });
    console.log("‚úÖ ƒê√£ t·∫£i trang c√¥ng n·ª£.");

    // Ch·ªçn gi√° tr·ªã "T·∫•t c·∫£" trong dropdown
    console.log("üîÑ ƒêang ch·ªçn gi√° tr·ªã 'T·∫•t c·∫£' trong dropdown...");
    await page.waitForSelector("div.MuiSelect-select.MuiSelect-outlined", { timeout: 10000 });
    await page.click("div.MuiSelect-select.MuiSelect-outlined");
    await page.waitForSelector("ul[role='listbox'] li", { timeout: 10000 });
    await page.evaluate(() => {
      const options = Array.from(document.querySelectorAll("ul[role='listbox'] li"));
      const allOption = options.find((option) => option.textContent.trim() === "T·∫•t c·∫£");
      if (allOption) allOption.click();
    });
    await new Promise(resolve => setTimeout(resolve, 6000)); // Ch·ªù 6 gi√¢y ƒë·ªÉ b·∫£ng t·∫£i l·∫°i
    await page.waitForSelector("table.MuiTable-root.MuiTable-stickyHeader", { timeout: 30000 });
    console.log("‚úÖ ƒê√£ ch·ªçn 'T·∫•t c·∫£' v√† b·∫£ng ƒë√£ t·∫£i l·∫°i.");

    const tuitionData = await page.evaluate(() => {
      const rows = Array.from(
        document.querySelectorAll("table.MuiTable-root.MuiTable-stickyHeader tbody tr")
      );
      // T√¨m d√≤ng t·ªïng (√¥ ƒë·∫ßu ti√™n ch·ª©a "T·ªïng")
      const totalRow = rows.find(row => 
        row.querySelector("td")?.textContent.trim() === "T·ªïng"
      );
      
      if (!totalRow) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y d√≤ng t·ªïng!");
        return { error: "Kh√¥ng t√¨m th·∫•y d√≤ng t·ªïng." };
      }

      const cells = totalRow.querySelectorAll("td");
      
      // Log ƒë·ªÉ ki·ªÉm tra
      console.log("S·ªë h√†ng trong b·∫£ng:", rows.length);
      console.log("N·ªôi dung d√≤ng t·ªïng:", Array.from(cells).map(c => c.textContent.trim()));
      console.log("S·ªë c·ªôt trong d√≤ng t·ªïng:", cells.length);

      return {
        totalCredits: cells[4]?.textContent.trim() || "0", // C·ªôt TC
        totalAmountDue: cells[6]?.textContent.trim() || "0 ‚Ç´", // C·ªôt M·ª©c n·ªôp
        totalDebt: cells[12]?.textContent.trim() || "0 ‚Ç´", // C·ªôt C√¥ng n·ª£
      };
    });

    if (tuitionData.error) throw new Error(tuitionData.error);

    // L√†m s·∫°ch d·ªØ li·ªáu
    const cleanedData = {
      totalCredits: cleanText(tuitionData.totalCredits),
      totalAmountDue: cleanText(tuitionData.totalAmountDue),
      totalDebt: cleanText(tuitionData.totalDebt),
    };

    console.log("‚úÖ ƒê√£ l·∫•y v√† l√†m s·∫°ch th√¥ng tin c√¥ng n·ª£:", cleanedData);
    return cleanedData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getTuition:", error.message);
    throw error;
  } finally {
    if (browser) await browser.close();
  }
}

module.exports = { getSchedule, getTuition };
