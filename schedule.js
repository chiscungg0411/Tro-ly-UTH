// schedule.js
function cleanText(text) {
  const validPattern = /[A-Za-z√Ä-·ªπ0-9\s/:.\-‚Ç´]/; // Th√™m ‚Ç´ ƒë·ªÉ gi·ªØ ƒë∆°n v·ªã ti·ªÅn
  return Array.from(text)
    .filter((char) => validPattern.test(char))
    .join("")
    .trim();
}

async function login(page, username, password, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîë Th·ª≠ ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}...`);
      await page.goto("https://portal.ut.edu.vn/", {
        waitUntil: "networkidle2",
        timeout: 60000,
      });
      console.log("‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i.");

      await page.waitForSelector("input[name='username']", { timeout: 30000 });
      await page.type("input[name='username']", username, { delay: 50 });
      await page.waitForSelector("input[name='password']", { timeout: 30000 });
      await page.type("input[name='password']", password, { delay: 50 });
      console.log("‚úçÔ∏è ƒê√£ nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.");

      await page.click("button[type='submit']");
      await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 60000 });
      const finalUrl = page.url();
      console.log(`üåê URL sau ƒëƒÉng nh·∫≠p: ${finalUrl}`);

      if (finalUrl.includes("/dashboard")) {
        console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng.");
        return true;
      } else {
        throw new Error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, ki·ªÉm tra th√¥ng tin.");
      }
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}:`, error.message);
      if (attempt === retries) throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau ${retries} l·∫ßn.`);
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }
  }
}

async function getSchedule(launchBrowser, nextWeek = false) {
  let browser;
  try {
    browser = await launchBrowser();
    const page = await browser.newPage();

    await login(page, process.env.UT_USERNAME, process.env.UT_PASSWORD);

    await page.goto("https://portal.ut.edu.vn/schedule", {
      waitUntil: "networkidle2",
      timeout: 60000,
    });
    await page.waitForSelector("#schedule-grid", { timeout: 30000 });
    console.log("‚úÖ ƒê√£ t·∫£i trang l·ªãch h·ªçc.");

    const weekOptions = await page.$$eval(".fc-multimonth-title", (elements) =>
      elements.map((el) => el.textContent.trim())
    );
    const currentWeekIndex = nextWeek ? 1 : 0;

    if (weekOptions.length <= currentWeekIndex) {
      throw new Error("Kh√¥ng c√≥ l·ªãch tu·∫ßn sau ƒë·ªÉ l·∫•y.");
    }

    if (nextWeek) {
      await page.click(".fc-next-button");
      await new Promise((resolve) => setTimeout(resolve, 2000)); // Thay waitForTimeout
      console.log("‚úÖ ƒê√£ chuy·ªÉn sang tu·∫ßn sau.");
    }

    const scheduleData = await page.evaluate((weekIndex) => {
      const weekElements = document.querySelectorAll(".fc-multimonth-month");
      const targetWeek = weekElements[weekIndex];
      if (!targetWeek) return { error: "Kh√¥ng t√¨m th·∫•y tu·∫ßn y√™u c·∫ßu." };

      const events = targetWeek.querySelectorAll(".fc-daygrid-event");
      const schedule = {};

      events.forEach((event) => {
        const titleEl = event.querySelector(".fc-event-title");
        const timeEl = event.querySelector(".fc-event-time");
        if (titleEl && timeEl) {
          const title = titleEl.textContent.trim();
          const time = timeEl.textContent.trim();
          const dateEl = event.closest(".fc-daygrid-day");
          const date = dateEl ? dateEl.getAttribute("data-date") : "Unknown Date";

          if (!schedule[date]) schedule[date] = [];
          schedule[date].push({ time, title });
        }
      });

      return schedule;
    }, currentWeekIndex);

    if (scheduleData.error) throw new Error(scheduleData.error);

    console.log("‚úÖ ƒê√£ l·∫•y l·ªãch h·ªçc th√†nh c√¥ng.");
    return scheduleData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getSchedule:", error.message);
    throw error;
  } finally {
    if (browser) await browser.close();
  }
}

async function getTuition(launchBrowser) {
  let browser;
  try {
    browser = await launchBrowser();
    const page = await browser.newPage();

    await login(page, process.env.UT_USERNAME, process.env.UT_PASSWORD);

    await page.goto("https://portal.ut.edu.vn/tuition", {
      waitUntil: "networkidle2",
      timeout: 60000,
    });
    await page.waitForSelector(".MuiTable-root", { timeout: 30000 });
    console.log("‚úÖ ƒê√£ t·∫£i trang c√¥ng n·ª£.");

    // Ki·ªÉm tra v√† ch·ªçn "T·∫•t c·∫£" trong combobox
    const comboboxSelector = ".MuiSelect-select.MuiSelect-outlined";
    const currentValue = await page.$eval(comboboxSelector, (el) => el.textContent.trim());
    if (currentValue !== "T·∫•t c·∫£") {
      await page.click(comboboxSelector);
      await page.waitForSelector(".MuiMenu-list", { timeout: 10000 });
      await page.evaluate(() => {
        const options = Array.from(document.querySelectorAll(".MuiMenuItem-root"));
        const allOption = options.find((opt) => opt.textContent.trim() === "T·∫•t c·∫£");
        if (allOption) allOption.click();
      });
      await new Promise((resolve) => setTimeout(resolve, 3000)); // TƒÉng th·ªùi gian ch·ªù l√™n 3s
      console.log("‚úÖ ƒê√£ ch·ªçn 'T·∫•t c·∫£' trong combobox.");
    } else {
      console.log("‚úÖ Combobox ƒë√£ ·ªü tr·∫°ng th√°i 'T·∫•t c·∫£'.");
    }

    // ƒê·ª£i th√™m ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£ng ƒë∆∞·ª£c render ho√†n to√†n
    await new Promise((resolve) => setTimeout(resolve, 2000));
    console.log("‚è≥ ƒê√£ ƒë·ª£i th√™m ƒë·ªÉ b·∫£ng t·∫£i ho√†n to√†n.");

    const tuitionData = await page.evaluate(() => {
      const table = document.querySelector(".MuiTable-root");
      if (!table) return { error: "Kh√¥ng t√¨m th·∫•y b·∫£ng c√¥ng n·ª£." };

      const rows = table.querySelectorAll("tbody tr");
      if (rows.length === 0) return { error: "Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng." };

      // L·∫•y d√≤ng cu·ªëi c√πng (d√≤ng "T·ªïng") v√† ki·ªÉm tra colspan
      const totalRow = Array.from(rows).slice(-1)[0]; // L·∫•y d√≤ng cu·ªëi
      if (!totalRow || !totalRow.querySelector("td[colspan='4']")) {
        console.log("DEBUG: Kh√¥ng t√¨m th·∫•y d√≤ng 'T·ªïng' v·ªõi colspan=4");
        return { error: "Kh√¥ng t√¨m th·∫•y d√≤ng t·ªïng k·∫øt h·ª£p l·ªá." };
      }

      const totalCells = totalRow.querySelectorAll("td");
      console.log(`DEBUG: S·ªë c·ªôt trong d√≤ng t·ªïng: ${totalCells.length}`);
      console.log(`DEBUG: N·ªôi dung d√≤ng t·ªïng: ${totalRow.textContent.trim()}`);

      // L·∫•y d·ªØ li·ªáu v·ªõi ki·ªÉm tra an to√†n
      const totalCredits = totalCells[4]
        ? parseInt(totalCells[4].textContent.trim()) || 0
        : 0; // C·ªôt "TC" (index 4)
      const totalTuitionText = totalCells[5]
        ? totalCells[5].textContent.trim().replace(/[^0-9]/g, "")
        : "0"; // C·ªôt "H·ªçc ph√≠" (index 5)
      const totalTuition = parseInt(totalTuitionText) || 0;
      const totalDebtText = totalCells[12]
        ? totalCells[12].textContent.trim().replace(/[^0-9]/g, "")
        : "0"; // C·ªôt "C√¥ng n·ª£" (index 12)
      const totalDebt = parseInt(totalDebtText) || 0;

      return { totalCredits, totalTuition, totalDebt };
    });

    if (tuitionData.error) throw new Error(tuitionData.error);

    console.log("‚úÖ ƒê√£ l·∫•y th√¥ng tin c√¥ng n·ª£ th√†nh c√¥ng.");
    return {
      totalCredits: tuitionData.totalCredits,
      totalTuition: tuitionData.totalTuition.toLocaleString("vi-VN") + " ‚Ç´",
      totalDebt: tuitionData.totalDebt.toLocaleString("vi-VN") + " ‚Ç´",
    };
  } catch (error) {
    console.error("‚ùå L·ªói trong getTuition:", error.message);
    throw error;
  } finally {
    if (browser) await browser.close();
  }
}
