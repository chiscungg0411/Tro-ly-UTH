function cleanText(text) {
  const validPattern = /[A-Za-z√Ä-·ªπ0-9\s/:.\-‚Ç´]/; // Th√™m ‚Ç´ ƒë·ªÉ gi·ªØ ƒë∆°n v·ªã ti·ªÅn
  return Array.from(text)
    .filter((char) => validPattern.test(char))
    .join("")
    .trim();
}

async function login(page, username, password, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîë Th·ª≠ ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}...`);
      await page.goto("https://portal.ut.edu.vn/", {
        waitUntil: "networkidle2",
        timeout: 60000,
      });
      console.log("‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i.");

      await page.waitForSelector("input[name='username']", { timeout: 30000 });
      await page.type("input[name='username']", username, { delay: 50 });
      await page.waitForSelector("input[name='password']", { timeout: 30000 });
      await page.type("input[name='password']", password, { delay: 50 });
      console.log("‚úçÔ∏è ƒê√£ nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.");

      await page.click("button[type='submit']");
      await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 60000 });
      const finalUrl = page.url();
      console.log(`üåê URL sau ƒëƒÉng nh·∫≠p: ${finalUrl}`);

      if (finalUrl.includes("/dashboard")) {
        console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng.");
        return true;
      } else {
        throw new Error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, ki·ªÉm tra th√¥ng tin.");
      }
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}:`, error.message);
      if (attempt === retries) throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau ${retries} l·∫ßn.`);
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }
  }
}

async function getSchedule(launchBrowser, nextWeek = false) {
  let browser;
  try {
    browser = await launchBrowser();
    const page = await browser.newPage();

    await login(page, process.env.UT_USERNAME, process.env.UT_PASSWORD);

    await page.goto("https://portal.ut.edu.vn/calendar", {
      waitUntil: "networkidle2",
      timeout: 60000,
    });
    console.log("DEBUG: URL hi·ªán t·∫°i sau khi goto calendar:", page.url());

    // Ch·ªù b·∫£ng l·ªãch h·ªçc
    await page.waitForSelector(".MuiTable-root", { timeout: 60000 });
    console.log("‚úÖ ƒê√£ t·∫£i trang l·ªãch h·ªçc.");

    // Log n·ªôi dung trang ƒë·ªÉ debug
    const pageContent = await page.content();
    console.log("DEBUG: N·ªôi dung trang l·ªãch (1000 k√Ω t·ª± ƒë·∫ßu):", pageContent.slice(0, 1000));

    // Chuy·ªÉn sang tu·∫ßn sau n·∫øu c·∫ßn
    if (nextWeek) {
      await page
        .click('button[aria-label*="ArrowForwardIcon"], button:has(svg[data-testid="ArrowForwardIcon"])', {
          timeout: 5000,
        })
        .catch(() => {
          console.log("DEBUG: Kh√¥ng t√¨m th·∫•y n√∫t chuy·ªÉn tu·∫ßn, b·ªè qua.");
        });
      await new Promise((resolve) => setTimeout(resolve, 2000));
      console.log("‚úÖ ƒê√£ chuy·ªÉn sang tu·∫ßn sau (ho·∫∑c th·ª≠ chuy·ªÉn).");
      // ƒê·ª£i b·∫£ng t·∫£i l·∫°i
      await page.waitForSelector(".MuiTable-root", { timeout: 60000 });
    }

    const scheduleData = await page.evaluate(() => {
      const table = document.querySelector(".MuiTable-root");
      if (!table) return { error: "Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch h·ªçc." };

      const headers = table.querySelectorAll("thead th");
      const days = Array.from(headers)
        .slice(2) // B·ªè 2 c·ªôt ƒë·∫ßu ("Ca h·ªçc")
        .map((th) => {
          const text = th.textContent.trim();
          const dateMatch = text.match(/\d{2}\/\d{2}\/\d{4}/);
          return dateMatch ? dateMatch[0] : "Unknown Date";
        });

      const schedule = {};
      const rows = table.querySelectorAll("tbody tr");

      rows.forEach((row) => {
        const cells = row.querySelectorAll("td");
        if (cells.length < 2) return; // B·ªè qua h√†ng kh√¥ng c√≥ d·ªØ li·ªáu

        const shift = cells[0].textContent.trim(); // "Ca 1", "Ca 2", ...
        if (shift.includes("S√°ng") || shift.includes("Chi·ªÅu") || shift.includes("T·ªëi")) return; // B·ªè h√†ng ti√™u ƒë·ªÅ ca

        cells.forEach((cell, index) => {
          if (index < 2) return; // B·ªè 2 c·ªôt ƒë·∫ßu ("Ca h·ªçc", "Ca X")
          const day = days[index - 2];
          if (!day || day === "Unknown Date") return;

          const eventBox = cell.querySelector(".MuiBox-root.css-415vdw");
          if (eventBox) {
            const title = eventBox.querySelector("p.css-eu5kgx")?.textContent.trim() || "Kh√¥ng c√≥ t√™n m√¥n";
            const timeEl = eventBox.querySelector("p.css-189xydx:has(img[src*='clock-desk'])");
            const time = timeEl ? timeEl.textContent.trim() : "Kh√¥ng r√µ th·ªùi gian";
            const roomEl = eventBox.querySelector("p.css-189xydx:has(img[src*='door-closed'])");
            const room = roomEl ? roomEl.textContent.trim() : "Kh√¥ng r√µ ph√≤ng";

            if (!schedule[day]) schedule[day] = [];
            schedule[day].push({ time, title, room });
          }
        });
      });

      if (Object.keys(schedule).length === 0) {
        return { error: nextWeek ? "Kh√¥ng c√≥ l·ªãch tu·∫ßn sau." : "Kh√¥ng c√≥ l·ªãch tu·∫ßn n√†y." };
      }

      return schedule;
    });

    if (scheduleData.error) throw new Error(scheduleData.error);

    console.log("‚úÖ ƒê√£ l·∫•y l·ªãch h·ªçc th√†nh c√¥ng.");
    return scheduleData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getSchedule:", error.message);
    throw error;
  } finally {
    if (browser) await browser.close();
  }
}

async function getTuition(launchBrowser) {
  let browser;
  try {
    browser = await launchBrowser();
    const page = await browser.newPage();

    await login(page, process.env.UT_USERNAME, process.env.UT_PASSWORD);

    await page.goto("https://portal.ut.edu.vn/tuition", {
      waitUntil: "networkidle2",
      timeout: 60000,
    });
    await page.waitForSelector(".MuiTable-root", { timeout: 30000 });
    console.log("‚úÖ ƒê√£ t·∫£i trang c√¥ng n·ª£.");

    // Ki·ªÉm tra v√† ch·ªçn "T·∫•t c·∫£" trong combobox
    const comboboxSelector = ".MuiSelect-select.MuiSelect-outlined";
    const currentValue = await page.$eval(comboboxSelector, (el) => el.textContent.trim());
    if (currentValue !== "T·∫•t c·∫£") {
      await page.click(comboboxSelector);
      await page.waitForSelector(".MuiMenu-list", { timeout: 10000 });
      await page.evaluate(() => {
        const options = Array.from(document.querySelectorAll(".MuiMenuItem-root"));
        const allOption = options.find((opt) => opt.textContent.trim() === "T·∫•t c·∫£");
        if (allOption) allOption.click();
      });
      await new Promise((resolve) => setTimeout(resolve, 2000));
      console.log("‚úÖ ƒê√£ ch·ªçn 'T·∫•t c·∫£' trong combobox.");
    } else {
      console.log("‚úÖ Combobox ƒë√£ ·ªü tr·∫°ng th√°i 'T·∫•t c·∫£'.");
    }

    const tuitionData = await page.evaluate(() => {
      const table = document.querySelector(".MuiTable-root");
      if (!table) return { error: "Kh√¥ng t√¨m th·∫•y b·∫£ng c√¥ng n·ª£." };

      const rows = table.querySelectorAll("tbody tr");
      if (rows.length === 0) return { error: "Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng." };

      // L·∫•y d√≤ng "T·ªïng" (d√≤ng cu·ªëi c√πng)
      const totalRow = Array.from(rows).find((row) => row.textContent.includes("T·ªïng"));
      if (!totalRow) return { error: "Kh√¥ng t√¨m th·∫•y d√≤ng t·ªïng k·∫øt." };

      const totalCells = totalRow.querySelectorAll("td");
      console.log(`DEBUG: S·ªë c·ªôt trong d√≤ng t·ªïng: ${totalCells.length}`);

      // L·∫•y d·ªØ li·ªáu v·ªõi ki·ªÉm tra an to√†n
      const totalCredits = totalCells[4]
        ? parseInt(totalCells[4].textContent.trim()) || 0
        : 0;
      const totalTuitionText = totalCells[5]
        ? totalCells[5].textContent.trim().replace(/[^0-9]/g, "")
        : "0";
      const totalTuition = parseInt(totalTuitionText) || 0;
      const totalDebtText = totalCells[12]
        ? totalCells[12].textContent.trim().replace(/[^0-9]/g, "")
        : "0";
      const totalDebt = parseInt(totalDebtText) || 0;

      return { totalCredits, totalTuition, totalDebt };
    });

    if (tuitionData.error) throw new Error(tuitionData.error);

    console.log("‚úÖ ƒê√£ l·∫•y th√¥ng tin c√¥ng n·ª£ th√†nh c√¥ng.");
    return {
      totalCredits: tuitionData.totalCredits,
      totalTuition: tuitionData.totalTuition.toLocaleString("vi-VN") + " ‚Ç´",
      totalDebt: tuitionData.totalDebt.toLocaleString("vi-VN") + " ‚Ç´",
    };
  } catch (error) {
    console.error("‚ùå L·ªói trong getTuition:", error.message);
    throw error;
  } finally {
    if (browser) await browser.close();
  }
}

module.exports = { getSchedule, getTuition };
